def label = "test-${UUID.randomUUID().toString()}"
podTemplate(
	label: label, 
	containers: [
		//container image는 docker search 명령 이용
		containerTemplate(name: "docker", image: "docker:stable", ttyEnabled: true, command: "cat"),
		containerTemplate(name: "helm", image: "dtzar/helm-kubectl", ttyEnabled: true, command: "cat")
	],
	//volume mount
	volumes: [
		hostPathVolume(hostPath: "//var/run/docker.sock", mountPath: "/var/run/docker.sock")
	]
)
{
	node(label) {

        stage('Clone repository') {
         checkout scm
        }

		try {
            
            stage("Build Docker image"){
                container("docker"){
                    app=docker.build("jyh5530/web-analysis")
                }
            }

			stage("Push Docker image") {
				container("docker") {
					docker.withRegistry("https://registry.hub.docker.com", "dockerhubid") {
                        app.push("latest")
					}
				}
			}
			//-- 이미 설치한 차트인 경우 upgrade하고, 아니면 신규 설치함
			//-- git에서 CHART파일을 보내는 경우는 CHART파일을 이용하고, 아니면 helm repository를 이용함

			stage( "Deploy to Cluster" ) {
				container("helm") {
					boolean isExist = false
	
					//====== 이미 설치된 chart 인지 검사 =============
					//String out = sh script: "helm ls -q --namespace ${namespace}", returnStdout: true
					//if(out.contains("${releaseName}")) isExist = true
                    //String out = sh script: "helm ls --namespace dev", returnStdout: true
					//if(out.contains("webapp")) isExist = true
					//===========================		
                    sh "helm repo add github-test https://yunhacho.github.io/helm-charts/"
                    sh "helm repo update"
                    sh "helm install webapp github-test/test --namespace dev"

					/*if(fileExists("${helmChartfile}")) {
						//chart 파일이 있는 경우
						echo "Helm chart exists. !"
						if (isExist) {
							echo "Already installed. I will upgrade it with chart file"
							//sh "helm upgrade ${releaseName} ${helmChartfile}"
                            sh "helm upgrade webapp github-test/test"
						} else {
							echo "Install with chart file !"
							//sh "helm install ${releaseName} ${helmChartfile} --namespace ${namespace}"
                            sh "helm install webapp github-test/test --namespace dev"
						}	
					}*/ /*else {
						//없는 경우는 helm repository에서 설치
						echo "Helm chart doesn't exist !" 
						
						sh "helm init"	//tiller 설치								
						
						//add repo
						try {
							withCredentials(
								[
									usernamePassword
										(credentialsId: "${credentialRepository}", 
											usernameVariable: "helmRepositoryID",
											passwordVariable: "helmRepositoryPW" 
										),	
									file
										(credentialsId: "${crtRepository}", 
											variable: "helmRepositoryCertyfile")
								]
							) {
								String secretDir = "tmpsecret"
								//-- crt파일 처리 
								sh """
									mkdir ${secretDir}									
									cp ${helmRepositoryCertyfile} ${secretDir}/tls.crt								
								"""
								//-----

								sh "helm repo add ${helmRepository} ${helmRepositoryURI}  \
									--ca-file ${secretDir}/tls.crt  \
									--username ${helmRepositoryID}  \
									--password ${helmRepositoryPW}" 								
								
							}

						} catch(e) {
							error("Can't get credential ! Stop process")	//종료
							
						}
													
						sh "helm repo update"		//update chart

						if (isExist) {
							//upgrade
							echo "Already installed. I will upgrade it from helm repository"
							sh "helm upgrade ${releaseName} ${helmRepository}/${helmChartname}"
							
						} else {
							//install
							echo "Install from helm repository !" 
							sh "helm install ${helmRepository}/${helmChartname} --name ${releaseName} --namespace ${namespace}"						
						}						
										
					}*/
				}
			}
    	}  catch(e) {
			currentBuild.result = "FAILED"
		}
	}
}
